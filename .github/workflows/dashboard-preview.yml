name: Dashboard Preview

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  dashboard-preview:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Set up Kubernetes with Kind
        uses: helm/kind-action@v1.5.0
        with:
          cluster_name: volcano

      - name: Apply Volcano Dashboard YAML
        run: |
          kubectl create namespace volcano-system || true
          kubectl apply -f deployment/volcano-dashboard.yaml

      - name: Debug: Pod Status
        run: kubectl get pods -n volcano-system -o wide

      - name: Debug: Check Pod Logs
        run: |
          POD=$(kubectl get pod -l app=volcano-dashboard -n volcano-system -o jsonpath='{.items[0].metadata.name}')
          kubectl logs -n volcano-system $POD || true

      - name: Debug: Describe Dashboard Pod
        run: kubectl describe pod -l app=volcano-dashboard -n volcano-system || true

      - name: Debug: Check All Events
        run: kubectl get events -n volcano-system --sort-by='.lastTimestamp' || true

      - name: Wait for Dashboard to be Ready
        run: |
          kubectl wait --for=condition=ready pod -l app=volcano-dashboard -n volcano-system --timeout=300s

      - name: Port-forward Dashboard Frontend
        run: |
          nohup kubectl port-forward svc/volcano-dashboard 8080:80 -n volcano-system &
          sleep 10

      - name: Install Puppeteer
        run: npm install puppeteer

      - name: Take Screenshot of Dashboard
        run: |
          node <<EOF
          const puppeteer = require('puppeteer');

          (async () => {
            const maxRetries = 5;
            const delay = (ms) => new Promise((res) => setTimeout(res, ms));

            for (let attempt = 1; attempt <= maxRetries; attempt++) {
              try {
                console.log(\`Attempt \${attempt}: Connecting to Dashboard...\`);
                const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });
                const page = await browser.newPage();
                await page.goto('http://localhost:8080', { waitUntil: 'domcontentloaded', timeout: 30000 });
                
                await page.waitForSelector('body', { timeout: 10000 }); // Change selector as needed!
                await page.screenshot({ path: 'dashboard-screenshot.png' });
                console.log("Screenshot taken successfully!");
                await browser.close();
                process.exit(0);
              } catch (error) {
                console.error(\`Error on attempt \${attempt}: \`, error.message);
                if (attempt < maxRetries) {
                  console.log("Retrying in 10 seconds...");
                  await delay(10000);
                } else {
                  console.error("Max retries reached. Failing...");
                  process.exit(1);
                }
              }
            }
          })();
          EOF

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-preview
          path: dashboard-screenshot.png
