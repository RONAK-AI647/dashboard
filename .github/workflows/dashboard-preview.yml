name: Dashboard Preview

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  dashboard-preview:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Set up Kubernetes with Kind
        uses: helm/kind-action@v1.5.0
        with:
          cluster_name: volcano

      - name: Apply Volcano Dashboard YAML
        run: |
          kubectl create namespace volcano-system || true
          kubectl apply -f deployment/volcano-dashboard.yaml

      - name: Debug: Pod Status
        run: kubectl get pods -n volcano-system -o wide

      - name: Debug: Check Pod Logs
        run: |
          POD=$(kubectl get pod -l app=volcano-dashboard -n volcano-system -o jsonpath='{.items[0].metadata.name}')
          kubectl logs -n volcano-system $POD || true

      - name: Wait for Dashboard to be Ready
        run: |
          kubectl wait --for=condition=ready pod -l app=volcano-dashboard -n volcano-system --timeout=180s

      - name: Port-forward Dashboard Frontend
        run: |
          nohup kubectl port-forward svc/volcano-dashboard 8080:80 -n volcano-system &
          for i in {1..30}; do
            nc -z localhost 8080 && echo "Port 8080 is open" && exit 0
            echo "Waiting for port 8080 to open..."
            sleep 5
          done
          echo "Port 8080 did not open in time" && exit 1

      - name: Debug: Get Services
        run: kubectl get svc -n volcano-system -o wide

      - name: Debug: Get Pods
        run: kubectl get pods -n volcano-system -o wide

      - name: Debug: Check Port-Forward Process
        run: ps aux | grep 'kubectl port-forward'

      - name: Install Puppeteer
        run: npm install puppeteer

      - name: Take Screenshot of Dashboard
        run: |
          node <<EOF
          const puppeteer = require('puppeteer');
          const maxRetries = 5;
          const delay = ms => new Promise(res => setTimeout(res, ms));

          (async () => {
            const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });
            const page = await browser.newPage();

            for (let i = 1; i <= maxRetries; i++) {
              try {
                console.log(\`Attempt \${i}: Connecting to Dashboard...\`);
                await page.goto('http://localhost:8080', { waitUntil: 'networkidle2', timeout: 60000 });
                console.log("Connected!");
                await page.screenshot({ path: 'dashboard-screenshot.png' });
                break;
              } catch (err) {
                console.error(\`Error on attempt \${i}: \${err.message}\`);
                if (i === maxRetries) {
                  console.error("Max retries reached. Failing...");
                  process.exit(1);
                }
                console.log("Retrying in 10 seconds...");
                await delay(10000);
              }
            }

            await browser.close();
          })();
          EOF

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-preview
          path: dashboard-screenshot.png
